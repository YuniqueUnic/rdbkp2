name: CI
on:
  push:
    # branches: [main]
    tags: ["v*"]
  pull_request:
    branches: [main]
# Add top-level permissions configuration
permissions:
  contents: write
  packages: write
env:
  CARGO_TERM_COLOR: always
  RUST_LOG: info
  BINARY_NAME: rdbkp2
jobs:
  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [stable]
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ matrix.rust }}
          components: clippy, rustfmt
      # Install OpenSSL on Ubuntu
      - name: Install OpenSSL (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libssl-dev
      # Install OpenSSL on macOS
      - name: Install OpenSSL (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install openssl@3
          echo "OPENSSL_DIR=$(brew --prefix openssl@3)" >> $GITHUB_ENV
      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2
      - name: Check formatting
        run: cargo fmt -- --check
      # - name: Clippy
      #   run: cargo clippy -- -D warnings
      - name: Run tests
        run: cargo test --verbose
      - name: Build
        run: cargo build --verbose
  build-release:
    name: Build Release
    needs: [test]
    if: startsWith(github.ref, 'refs/tags/v')
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            suffix: linux-x86_64
            use_cross: true
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            suffix: linux-aarch64
            use_cross: true
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            suffix: windows-x86_64.exe
            use_cross: false
          - os: macos-latest
            target: x86_64-apple-darwin
            suffix: darwin-x86_64
            use_cross: false
          - os: macos-latest
            target: aarch64-apple-darwin
            suffix: darwin-aarch64
            use_cross: false
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      # Install OpenSSL for Linux builds (for non-cross builds)
      - name: Install OpenSSL (Ubuntu)
        if: runner.os == 'Linux' && matrix.use_cross != true
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libssl-dev
      # Install OpenSSL for macOS builds
      - name: Install OpenSSL (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install openssl@3
          echo "OPENSSL_DIR=$(brew --prefix openssl@3)" >> $GITHUB_ENV
      - name: Install cross
        if: matrix.use_cross
        run: cargo install cross
      # 修改 Cargo.toml 以使用 vendored 特性
      - name: Configure OpenSSL vendored feature
        if: matrix.use_cross
        run: |
          # 添加 openssl-sys 的 vendored 特性到 Cargo.toml
          echo '
          [dependencies.openssl-sys]
          version = "*"
          features = ["vendored"]' >> Cargo.toml
      - name: Build binary
        run: |
          if [ "${{ matrix.use_cross }}" = "true" ]; then
            cross build --release --target ${{ matrix.target }}
          else
            cargo build --release --target ${{ matrix.target }}
          fi
        shell: bash
        env:
          OPENSSL_STATIC: 1
          PKG_CONFIG_ALLOW_CROSS: 1
      - name: Prepare binary
        shell: bash
        run: |
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            cp target/${{ matrix.target }}/release/${{ env.BINARY_NAME }}.exe ${{ env.BINARY_NAME }}-${{ matrix.suffix }}
          else
            cp target/${{ matrix.target }}/release/${{ env.BINARY_NAME }} ${{ env.BINARY_NAME }}-${{ matrix.suffix }}
          fi
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.BINARY_NAME }}-${{ matrix.suffix }}
          path: ${{ env.BINARY_NAME }}-${{ matrix.suffix }}
  create-release:
    name: Create Release
    needs: [build-release]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    # Set permissions for this job specifically
    permissions:
      contents: write
      packages: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Generate changelog file
        run: |
          # Get the previous tag or use the initial commit if no tag exists
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || git rev-list --max-parents=0 HEAD)
          # Create a changelog file
          echo "# Changes in this release" > changelog.md
          echo "" >> changelog.md
          # Add commit messages to the changelog file
          git log ${PREV_TAG}..HEAD --pretty=format:"* %s" | sed 's/^/- /' >> changelog.md
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      - name: Create release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: artifacts/**/*
          body_path: changelog.md
          draft: false
          prerelease: false
  publish-crate:
    name: Publish to crates.io
    needs: [create-release]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      - name: Publish to crates.io
        run: cargo publish --token ${CRATES_TOKEN}
        env:
          CRATES_TOKEN: ${{ secrets.CRATES_TOKEN }}