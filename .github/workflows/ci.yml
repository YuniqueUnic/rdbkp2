name: CI
on:
  push:
    # branches: [main]
    tags: ["v*"]
  pull_request:
    branches: [main]
# Add top-level permissions configuration
permissions:
  contents: write
  packages: write
env:
  CARGO_TERM_COLOR: always
  RUST_LOG: info
  BINARY_NAME: rdbkp2
  OPENSSL_STATIC: true
  PKG_CONFIG_ALLOW_CROSS: true
jobs:
  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [stable]
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ matrix.rust }}
          components: clippy, rustfmt

      # Install OpenSSL on Ubuntu
      - name: Install OpenSSL (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libssl-dev
          echo "PKG_CONFIG_PATH=/usr/lib/x86_64-linux-gnu/pkgconfig:/usr/lib/pkgconfig" >> $GITHUB_ENV
          echo "OPENSSL_DIR=/usr" >> $GITHUB_ENV
          echo "OPENSSL_LIB_DIR=/usr/lib/x86_64-linux-gnu" >> $GITHUB_ENV
          echo "OPENSSL_INCLUDE_DIR=/usr/include" >> $GITHUB_ENV

      # Install OpenSSL on macOS
      - name: Install OpenSSL (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install openssl@3
          echo "OPENSSL_DIR=$(brew --prefix openssl@3)" >> $GITHUB_ENV
          echo "OPENSSL_LIB_DIR=$(brew --prefix openssl@3)/lib" >> $GITHUB_ENV
          echo "OPENSSL_INCLUDE_DIR=$(brew --prefix openssl@3)/include" >> $GITHUB_ENV

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2

      - name: Check formatting
        run: cargo fmt -- --check

      - name: Run tests
        run: cargo test --verbose

      - name: Build
        run: cargo build --verbose

  build-release:
    name: Build Release
    needs: [test]
    if: startsWith(github.ref, 'refs/tags/v')
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            suffix: linux-x86_64
            use_cross: true
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            suffix: linux-aarch64
            use_cross: true
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            suffix: windows-x86_64.exe
            use_cross: false
          - os: macos-latest
            target: x86_64-apple-darwin
            suffix: darwin-x86_64
            use_cross: false
          - os: macos-latest
            target: aarch64-apple-darwin
            suffix: darwin-aarch64
            use_cross: false
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4

      # Add vendored OpenSSL configuration to Cargo.toml
      - name: Configure vendored OpenSSL
        run: |
          echo '
          [dependencies.openssl-sys]
          version = "*"
          features = ["vendored"]' >> Cargo.toml

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      # Install cross-compilation tools for Linux
      - name: Install cross-compilation tools (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
          sudo apt-get install -y musl-tools

      # Install dependencies for macOS builds
      - name: Install dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install openssl@3
          echo "OPENSSL_DIR=$(brew --prefix openssl@3)" >> $GITHUB_ENV
          echo "OPENSSL_LIB_DIR=$(brew --prefix openssl@3)/lib" >> $GITHUB_ENV
          echo "OPENSSL_INCLUDE_DIR=$(brew --prefix openssl@3)/include" >> $GITHUB_ENV
          
          if [ "${{ matrix.target }}" = "x86_64-apple-darwin" ]; then
            brew uninstall xz || true
            arch -x86_64 brew install --build-from-source xz
            echo "LZMA_API_STATIC=1" >> $GITHUB_ENV
            echo "XZ_STATIC=1" >> $GITHUB_ENV
            echo "PKG_CONFIG_PATH=/usr/local/opt/xz/lib/pkgconfig" >> $GITHUB_ENV
          fi

      # Configure cross-compilation environment
      - name: Configure cross-compilation
        if: matrix.use_cross
        run: |
          mkdir -p .cargo
          echo '[target.aarch64-unknown-linux-gnu]
          linker = "aarch64-linux-gnu-gcc"
          [target.x86_64-unknown-linux-gnu]
          rustflags = ["-C", "target-feature=+crt-static"]' > .cargo/config.toml

      - name: Install cross
        if: matrix.use_cross
        run: cargo install cross

      - name: Build binary
        run: |
          if [ "${{ matrix.use_cross }}" = "true" ]; then
            cross build --release --target ${{ matrix.target }}
          else
            cargo build --release --target ${{ matrix.target }}
          fi
        shell: bash
        env:
          OPENSSL_STATIC: true
          PKG_CONFIG_ALLOW_CROSS: true
          CARGO_BUILD_TARGET: ${{ matrix.target }}
          RUSTFLAGS: "-C target-feature=+crt-static"

      - name: Prepare binary
        shell: bash
        run: |
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            cp target/${{ matrix.target }}/release/${{ env.BINARY_NAME }}.exe ${{ env.BINARY_NAME }}-${{ matrix.suffix }}
          else
            cp target/${{ matrix.target }}/release/${{ env.BINARY_NAME }} ${{ env.BINARY_NAME }}-${{ matrix.suffix }}
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.BINARY_NAME }}-${{ matrix.suffix }}
          path: ${{ env.BINARY_NAME }}-${{ matrix.suffix }}

  create-release:
    name: Create Release
    needs: [build-release]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    # Set permissions for this job specifically
    permissions:
      contents: write
      packages: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Generate changelog file
        run: |
          # Get the previous tag or use the initial commit if no tag exists
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || git rev-list --max-parents=0 HEAD)
          # Create a changelog file
          echo "# Changes in this release" > changelog.md
          echo "" >> changelog.md
          # Add commit messages to the changelog file
          git log ${PREV_TAG}..HEAD --pretty=format:"* %s" | sed 's/^/- /' >> changelog.md
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      - name: Create release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: artifacts/**/*
          body_path: changelog.md
          draft: false
          prerelease: false
  
  publish-crate:
    name: Publish to crates.io
    needs: [create-release]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      - name: Publish to crates.io
        run: cargo publish --token ${CRATES_TOKEN}
        env:
          CRATES_TOKEN: ${{ secrets.CRATES_TOKEN }}